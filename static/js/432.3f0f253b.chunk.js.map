{"version":3,"file":"static/js/432.3f0f253b.chunk.js","mappings":"2KACA,EAA0B,yBAA1B,EAAiE,6BAAjE,EAAuG,wBAAvG,EAAwI,wBAAxI,EAA2K,0B,mBCY3K,EATmB,SAACA,GAChB,IAAMC,EAAO,YAAcD,EAAME,GACjC,OACI,gBAAKC,UAAWC,EAAW,IAAMA,EAAjC,UACI,SAAC,KAAD,CAASC,GAAIJ,EAAb,SAAoBD,EAAMM,U,oECFhCC,GAAeC,EAAAA,EAAAA,GAAiB,KAoBtC,GAAeC,EAAAA,EAAAA,GAAU,CAACC,KAAM,2BAAhC,EAlBsB,SAACV,GACnB,OACI,kBAAMW,SAAUX,EAAMY,aAAtB,WACI,0BACI,SAACC,EAAA,EAAD,CACIC,UAAWC,EAAAA,GACXT,KAAM,iBACNU,YAAY,qBACZC,SAAU,CAACC,EAAAA,EAAUX,QAG7B,0BACI,6CCgBhB,EA5BgB,SAACP,GACb,IAAImB,EAAQnB,EAAMoB,YAEdC,EAAkBF,EAAMG,QAAQC,KAAI,SAAAC,GAAC,OAAI,SAAC,EAAD,CAAuBtB,GAAIsB,EAAEtB,GAAII,KAAMkB,EAAElB,MAAxBkB,EAAEtB,OAC5DuB,EAAkBN,EAAMO,SAASH,KAAI,SAAAI,GAAC,OAAI,SAAC,IAAD,CAAoBC,QAASD,EAAEC,SAAjBD,EAAEzB,OAO9D,OAAIF,EAAM6B,QAGN,iBAAK1B,UAAWC,EAAhB,WACI,gBAAKD,UAAWC,EAAhB,SACKiB,KAEL,iBAAKlB,UAAWC,EAAhB,WACI,yBAAMqB,KACN,SAACK,EAAD,CAAgBnB,SAbN,SAACoB,GACnB/B,EAAMgC,YAAYD,EAAOE,0BAGJ,SAAC,KAAD,CAAW5B,GAAI,Y,2DCC5C,GAAe6B,E,QAAAA,KACXC,EAAAA,EAAAA,KAfoB,SAAChB,GACrB,MAAO,CACHC,YAAaD,EAAMC,gBAIA,SAACgB,GACxB,MAAO,CACHJ,YAAa,SAACC,GACVG,GAASC,EAAAA,EAAAA,IAAmBJ,UCVR,SAACK,GAAe,IACtCC,EADqC,0IAEvC,WACI,OAAIC,KAAKxC,MAAM6B,QAER,SAACS,GAAD,UAAeE,KAAKxC,SAFG,SAAC,KAAD,CAAUK,GAAG,eAHR,GACXoC,EAAAA,WAOhC,OAAOF,IDOX,CAGEG,I,gIE8BWC,EAAuB,WAChC,MAAO,CACHC,KApDS,aA+DJP,EAAqB,WAC9B,MAAO,CACHO,KA9Da,kB,yFCNd,IAAM1B,EAAW,SAAC2B,GACrB,IAAGA,EACH,MAAO,qBAGErC,EAAmB,SAACsC,GAAD,OAAe,SAACD,GAC5C,GAAGA,EAAME,OAASD,EAAW,MAAM,iBAAN,OAAwBA,EAAxB","sources":["webpack://network/./src/components/Dialogs/Dialogs.module.css?1b2e","components/Dialogs/DialogItem/DialogsItem.jsx","components/Dialogs/AddMessageForm/AddMessageForm.jsx","components/Dialogs/Dialogs.jsx","components/Dialogs/DialogsContainer.jsx","components/hoc/withAuthRedirect.js","redux/state.js","utils/validators/validators.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"dialogs\":\"Dialogs_dialogs__nOkwQ\",\"dialogsItem\":\"Dialogs_dialogsItem__9tHgB\",\"active\":\"Dialogs_active__2jnjF\",\"dialog\":\"Dialogs_dialog__7DTJS\",\"messages\":\"Dialogs_messages__+AHQw\",\"message\":\"Dialogs_message__53Qs7\"};","import React from 'react';\r\nimport s from './../Dialogs.module.css';\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\nconst DialogItem = (props) => {\r\n    const path = '/dialogs/' + props.id;\r\n    return (\r\n        <div className={s.dialog + ' ' + s.active}>\r\n            <NavLink to={path}>{props.name}</NavLink>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default DialogItem;","import React from \"react\";\r\nimport {Field, reduxForm} from 'redux-form';\r\nimport { maxLengthCreator, required } from \"../../../utils/validators/validators\";\r\nimport { Textarea } from \"../../common/FormsControls/FormsControls\";\r\n\r\n\r\nconst maxLength100 = maxLengthCreator(100);\r\n\r\nconst AddMessaeForm = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field \r\n                    component={Textarea} \r\n                    name={'newMessageBody'} \r\n                    placeholder='Enter your message'\r\n                    validate={[required, maxLength100]}\r\n                />\r\n            </div>\r\n            <div>\r\n                <button>Send</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default reduxForm({form: 'dialog-add-message-form'})(AddMessaeForm);","import React from 'react';\r\nimport s from './Dialogs.module.css'\r\nimport DialogItem from \"./DialogItem/DialogsItem\";\r\nimport Message from \"./Message/Message\";\r\nimport { Navigate  } from 'react-router-dom';\r\nimport AddMessageForm from './AddMessageForm/AddMessageForm';\r\n\r\n\r\nconst Dialogs = (props) => {\r\n    let state = props.dialogsPage;\r\n\r\n    let dialogsElements = state.dialogs.map(d => <DialogItem key={d.id} id={d.id} name={d.name} />);\r\n    let messagesElement = state.messages.map(m => <Message key={m.id} message={m.message}/>);\r\n    //let newMessageBody = state.newMessageBody;\r\n\r\n    const addNewMessage = (values) => {\r\n        props.sendMessage(values.newMessageBody)\r\n    }\r\n\r\n    if(!props.isAuth) return <Navigate  to={'/login'}/>\r\n\r\n    return (\r\n        <div className={s.dialogs}>\r\n            <div className={s.dialogsItem}>\r\n                {dialogsElements}\r\n            </div>\r\n            <div className={s.messages}>\r\n                <div>{messagesElement}</div>\r\n                <AddMessageForm onSubmit={addNewMessage}/>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n\r\nexport default Dialogs;","import {sendMessageCreator} from \"../../redux/state\";\r\nimport Dialogs from \"./Dialogs\";\r\nimport {connect} from \"react-redux\";\r\nimport { withAuthRedirect } from \"../hoc/withAuthRedirect\";\r\nimport { compose } from \"redux\";\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        dialogsPage: state.dialogsPage,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        sendMessage: (newMessageBody) => {\r\n            dispatch(sendMessageCreator(newMessageBody));\r\n        }\r\n    }\r\n}\r\n\r\nexport default compose(\r\n    connect(mapStateToProps, mapDispatchToProps),\r\n    withAuthRedirect\r\n)(Dialogs);","import React from \"react\";\r\nimport {Navigate} from 'react-router-dom';\r\n\r\n\r\n\r\nexport const withAuthRedirect = (Component) => {\r\n    class RedirectComponent extends React.Component {\r\n        render() {\r\n            if(!this.props.isAuth) return <Navigate to='/login'/>\r\n            \r\n            return <Component {...this.props}/>\r\n        }\r\n    }\r\n    return RedirectComponent;\r\n}","import profileReducer from \"./profile-reducer\";\r\nimport dialogsReducer from \"./dialogs-reducer\";\r\n\r\nconst ADD_POST = 'ADD-POST';\r\nconst UPDATE_NEW_POST_TEXT = 'UPDATE-NEW-POST-TEXT';\r\nconst UPDATE_NEW_MESSAGE_BODY = 'NEW-MESSAGE-BODY';\r\nconst SEND_MESSAGE = 'SEND_MESSAGE';\r\n\r\nconst store = {\r\n    _state: {\r\n\r\n        profilePage: {\r\n            posts: [\r\n                {id: 1, post: 'hi', likesCount: 12},\r\n                {id: 2, post: 'by', likesCount: 120},\r\n            ],\r\n            newPostText: 'Dima'\r\n        },\r\n\r\n        dialogsPage: {\r\n            dialogs:  [\r\n                {id: 1, name: 'Dima'},\r\n                {id: 2, name: 'Katy'},\r\n                {id: 3, name: 'Vova'},\r\n                {id: 4, name: 'Tany'}\r\n            ],\r\n            messages: [\r\n                {id: 1, message: 'hy'},\r\n                {id: 2, message: 'by'},\r\n                {id: 3, message: 'hy'},\r\n                {id: 4, message: 'by'}\r\n            ],\r\n            newMessageBody: ''\r\n        }\r\n    },\r\n    _callSubscriber() {\r\n        console.log('mdd,fm');\r\n    },\r\n\r\n    getState() {\r\n        return this._state\r\n    },\r\n    subscribe(observer) {\r\n        this._callSubscriber = observer;\r\n    },\r\n\r\n    dispatch(action) {\r\n       this._state.profilePage = profileReducer(this._state.profilePage, action);\r\n       this._state.dialogsPage = dialogsReducer(this._state.dialogsPage, action);\r\n       this._callSubscriber(this._state)\r\n    }\r\n}\r\n\r\nexport const addPostActionCreator = () => {\r\n    return {\r\n        type: ADD_POST,\r\n    }\r\n}\r\n\r\nexport const updateNewPostTextActionCreator = (text) => {\r\n    return {\r\n        type: UPDATE_NEW_POST_TEXT,\r\n        newText: text\r\n    }\r\n}\r\n\r\nexport const sendMessageCreator = () => {\r\n    return {\r\n        type: SEND_MESSAGE\r\n    }\r\n}\r\n\r\nexport const updateNewMessageBodyCreator = (body) => {\r\n    return {\r\n        type: UPDATE_NEW_MESSAGE_BODY,\r\n        body: body\r\n    }\r\n}\r\n\r\nexport default store;","export const required = (value) => {\r\n    if(value) return undefined;\r\n    return 'Field is required';\r\n}\r\n\r\nexport const maxLengthCreator = (maxLength) => (value) => {\r\n    if(value.length > maxLength) return `Max length is ${maxLength} symbols`;\r\n    return undefined;\r\n}"],"names":["props","path","id","className","s","to","name","maxLength100","maxLengthCreator","reduxForm","form","onSubmit","handleSubmit","Field","component","Textarea","placeholder","validate","required","state","dialogsPage","dialogsElements","dialogs","map","d","messagesElement","messages","m","message","isAuth","AddMessageForm","values","sendMessage","newMessageBody","compose","connect","dispatch","sendMessageCreator","Component","RedirectComponent","this","React","Dialogs","addPostActionCreator","type","value","maxLength","length"],"sourceRoot":""}